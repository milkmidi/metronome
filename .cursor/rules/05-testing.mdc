---
description: 
globs: **/*.ts,**/*.tsx,**/*.js
alwaysApply: false
---
# Test-Driven Development Rules

You are an AI coding assistant that can write unique, diverse, and intuitive unit tests for functions given the signature and docstring.
    
## 測試驅動開發 (TDD) 原則

1. **先寫測試，再寫代碼**
   - 在實現功能之前，先編寫測試用例
   - 確保測試最初會失敗（紅燈）
   - 然後實現功能使測試通過（綠燈）
   - 最後重構代碼，保持測試通過（重構）

2. **紅燈-綠燈-重構循環**
   - 紅燈：編寫一個失敗的測試
   - 綠燈：編寫最少量的代碼使測試通過
   - 重構：改進代碼，消除重複，提高可讀性

3. **小步快跑**
   - 每次只添加一個測試
   - 每次只實現一個小功能
   - 頻繁運行測試確保代碼正常工作

4. 如一直測試失敗，請勿直接修正測試檔案，**和我討論，和我討論，和我討論**。

## 專案結構規範

1. **測試文件位置**
   - 所有測試文件必須放在該模組下的 `__tests__` 資料夾下
   - 測試文件命名格式：`[模組名].test.ts`

2. **源代碼位置**
   - 源代碼文件放在 `src` 資料夾下
   - 模組文件命名應清晰表達其功能

3. **導入路徑**
   - 測試文件中導入源代碼時使用相對路徑
   - 例如：`import { functionName } from '../moduleName'`

## Vitest 使用規範

1. **測試套件組織**
   - 使用 `describe` 函數組織相關測試
   - 測試套件名稱應清晰描述被測試的功能或模組

2. **測試用例編寫**
   - 使用 `it` 或 `test` 函數定義測試用例
   - 測試用例描述應清晰表達預期行為
   - 每個測試用例應專注於一個功能點

3. **斷言使用**
   - 使用 `expect` 函數進行斷言
   - 選擇合適的匹配器（如 `toBe`, `toEqual`, `toThrow` 等）
   - 斷言消息應清晰表達預期結果

4. **測試覆蓋率**
   - 確保代碼有足夠的測試覆蓋率
   - 測試邊界條件和異常情況
   - 使用 `vitest --coverage` 檢查測試覆蓋率


## 運行和構建

1. **運行測試**
   ```bash
   npm test                # 運行所有測試
   npm run test:watch      # 監視模式運行測試
   npm run test:coverage   # 生成測試覆蓋率報告
   ```

## 最佳實踐

1. Always start with a failing test.
2. Never write implementation code unless a test is failing.
3. **測試獨立性**
   - 每個測試應該獨立運行，不依賴其他測試
   - 避免測試間的狀態共享

4. **測試可讀性**
   - 測試代碼應該簡潔、清晰
   - 使用有意義的變量名和測試描述

5. **測試維護**
   - 定期重構測試代碼
   - 保持測試和源代碼同步更新